require(car)
require(survivalROC) # for time-dependent ROC-analysis from Heagerty et al.
#require(survAUC) # for time-dependent ROC-analysis (alternative from Potapov et al.)
#require(tdROC) # for time-dependent ROC-analysis ([outdated?] alternative from Li et al.)
#require(timeROC) # for time-dependent ROC-analysis ([outdated?] alternative from Blanche)
require(pROC); require(ROCR) # both for cross-sectional ROC-analysis (main:pROC)
require(discSurv)
#for plots
require(ggplot2)
require(scales)
require(ggthemes)
require(RColorBrewer)
require(extrafont) #remotes::install_version("Rttf2pt1", version = "1.3.8"); Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.55.0/bin/gswin32c.exe"); font_import(); loadfonts(); loadfonts(device="win")
require(survminer)
require(gridExtra)
require(corrplot)
require(Metrics)
# ================ 1. Parametrisation
# - general R options
options(scipen=999) # Suppress showing scientific notation
# - To help safeguard against memory overruns during data importing
memory.limit(180000)
# - Parameters used in calculating delinquency measures
sc.Thres <- 0.9; # repayment ratio - g1
d <- 3 # default threshold for g0/g1-measures of delinquency (payments in arrears)
k <- 6 # Probation period
# - Custom path where R-scripts are saved
path_cust <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Default Survival Modelling/Scripts/"
# - Common path for storing important R-objects as back-up
genObjPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Default Survival Modelling/Objects/"
# - Common path for saving important analytics (e.g., sampling)
genFigPath <- "C:/Users/WRQ/OneDrive - FRG/Analytix/Research/Default Survival Modelling/Figures/"
# genFigPath <- "C:/TempData"
# - Common path for saving big data objects
genPath <- "C:/Data/DefaultSurv_Data/"
# - Common path for importing raw data
genRawPath <- "C:/Data/"
# ================ 2. Custom functions
# ------ Custom function definitions
# - Load all custom functions defined in a separate R-script
source(paste0(path_cust,"0a.CustomFunctions.R"))
# - Compile Delinquency Calculation Functions (CD, MD/DoD)
source(paste0(path_cust,'DelinqM.R'))
# - Confirm prepared credit data is loaded into memory
if (!exists('datCredit_real')) {
unpack.ffdf(paste0(genPath,"creditdata_final3"), tempPath)
}
# - Only selecting one record per performance spell
datSurv <- subset(datCredit_real, ExclusionID==0 & PerfSpell_Counter==1 & !is.na(PerfSpell_Num) & PerfSpell_Age < 500,
select=c("LoanID","PerfSpell_Key","PerfSpell_Age", "PerfSpellResol_Type_Hist", "PerfSpell_Num", "TimeInPerfSpell")); gc()
# ------ 2. Densities Overlaid
# --- Defaults vs Right Censored vs Competing Risks
# Group competing risks together
datSurv[,Resol_Type := case_when(PerfSpellResol_Type_Hist %in% c("Settled", "Paid-up", "Written-off") ~ "Competing Risk",
PerfSpellResol_Type_Hist == "Censored"                               ~ "Right-Censored",
TRUE                                                                 ~ "Default")]
# Dataset containing only the competing risks
datSurv2 <- datSurv %>% subset(Resol_Type=="Competing Risk") %>%
mutate(Resol_Type2 := case_when(PerfSpellResol_Type_Hist=="Settled"   ~ "Settlement",
PerfSpellResol_Type_Hist=="Paid-up"   ~ "Paid-Up",
TRUE                                  ~ "Written-Off"))
# - Calculate resolution proportions for labelling purposes
(Resol_Type.props <- table(datSurv$Resol_Type) %>% proportions())
table(datSurv$Resol_Type)
(Resol_Type2.props <- table(datSurv2$Resol_Type2) %>% proportions())
# Graphing Parameters
chosenFont <- "Cambria"
col.v <- brewer.pal(10, "Paired")[c(10,6,4, 1,2,8)]
col.v2 <- brewer.pal(10, "Paired")[c(10,5,3, 2,1,8)]
label.v <- c(paste0("Competing Risks (", round(Resol_Type.props[1]*100), "%)"),
paste0("Default (", round(Resol_Type.props[2]*100), "%)"),
paste0("Right-censored (", round(Resol_Type.props[3]*100), "%)"))
label.v2 <- c(paste0("Paid-Up (", round(Resol_Type2.props[1]*100), "%)"),
paste0("Settlement (", round(Resol_Type2.props[2]*100), "%)"),
paste0("Written-Off (", round(Resol_Type2.props[3]*100), "%)"))
# - Densities of resolution types overlayed
(g1_Densities_Resol_Type <- ggplot(datSurv[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution type", values=col.v2, labels=label.v) +
scale_fill_manual(name="Resolution type", values=col.v, labels=label.v) +
scale_linetype_manual(name="Resolution type", values=c("solid","dashed", "dotted"), labels=label.v) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# - Densities of competing risks overlayed
(g2_Densities_Resol_Type2 <- ggplot(datSurv2[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type2)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type2, fill=Resol_Type2), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type2, linetype=Resol_Type2), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v[4:6], labels=label.v2) +
scale_fill_manual(name="Competing Risk", values=col.v2[4:6], labels=label.v2) +
scale_linetype_manual(name="Competing Risk", values=c("solid","dashed", "dotted"), labels=label.v2) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# ------ 3. Defaults vs Non-Defaults (Graphs)
# --- Overlaying the density graphs of defaults vs non-defaults (competing events are right-censored, i.e., included)
# - Proportion of Defaults
CreditDat_Use[PerfSpellResol_Type_Hist=="Defaulted",.N]/CreditDat_Use[,.N]
# ------ 3. Defaults vs Non-Defaults (Graphs)
# --- Overlaying the density graphs of defaults vs non-defaults (competing events are right-censored, i.e., included)
# - Proportion of Defaults
datSurv[PerfSpellResol_Type_Hist=="Defaulted",.N]/datSurv[,.N]
# 19.1084% of accounts defaulted
# - Proportion of Non-Defaults
datSurv[PerfSpellResol_Type_Hist!="Defaulted",.N]/datSurv[,.N]
unique(datSurv$PerfSpellResol_Type_Hist)
# Creating a variable for easier graphing
datSurv3 <- datSurv %>% subset() %>%
mutate(Resol_Type3 := case_when(PerfSpellResol_Type_Hist %in% c("Censored","Settled","Paid-Up","Written-off")   ~ "Right-Censored",
TRUE ~ "Default"))
datSurv3
ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8)
table(datSurv$Resol_Type3)
table(datSurv3$Resol_Type3)
table(datSurv3$Resol_Type3) %>% proportions()
# - Calculate resolution proportions for labelling purposes
(Resol_Type.props3 <- table(datSurv3$Resol_Type3) %>% proportions())
ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8)
ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell"))
ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90))
label.v2[1:2]
ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v[4:5], labels=label.v2[1:2])
ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v[4:5], labels=label.v2[1:2]) +
scale_fill_manual(name="Competing Risk", values=col.v2[4:5], labels=label.v2)
label.v3 <- c(paste0("Default (", round(Resol_Type3.props[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type3.props[2]*100), "%)"))
# - Calculate resolution proportions for labelling purposes
(Resol_Type.props3 <- table(datSurv3$Resol_Type3) %>% proportions())
label.v3 <- c(paste0("Default (", round(Resol_Type3.props[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type3.props[2]*100), "%)"))
label.v3 <- c(paste0("Default (", round(Resol_Type.props3[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type.props3[2]*100), "%)"))
label.v3
ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v[4:5], labels=label.v3) +
scale_fill_manual(name="Competing Risk", values=col.v2[4:5], labels=label.v3)
col.v3 <- brewer.pal(10, "Sequential")[c(2,3)]
col.v4 <- brewer.pal(10, "Sequential")[c(1,4)]
col.v3 <- brewer.pal(10, "Qualitative")[c(2,3)]
brewer.pal(10, "Spectral")
brewer.pal(11, "Spectral")
col.v3 <- brewer.pal(11, "Spectral")[c(11,3)]
col.v4 <- brewer.pal(11, "Spectral")[c(10,4)]
col.v4
o
paste0("Default (", round(Resol_Type.props3[1]*100), "%)"
)
paste0("Right-censored (", round(Resol_Type.props3[2]*100), "%)")
c(paste0("Default (", round(Resol_Type.props3[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type.props3[2]*100), "%)"))
label.v3 <- c(paste0("Default (", round(Resol_Type.props3[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type.props3[2]*100), "%)"))
label.v3
label.v3
# Densities of defaults bs right-censoring
(g3_Densities_Resol_Type3 <- ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v3, labels=label.v3) +
scale_fill_manual(name="Competing Risk", values=col.v4, labels=label.v3) +
scale_linetype_manual(name="Competing Risk", values=c("solid","dashed"), labels=label.v3) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
unique(datSurv$Resol_Type)
# Creating a new dataset with the competing events completely removed
datSurv4 <- datSurv %>% subset(Resol_Type %in% c("Default", "Right-Censored"))
table(datSurv4$Resol_Type)
# - Calculate resolution proportions for labelling purposes
(Resol_Type.props4 <- table(datSurv4$Resol_Type) %>% proportions())
(Resol_Type.props <- table(datSurv$Resol_Type) %>% proportions())
(Resol_Type2.props <- table(datSurv2$Resol_Type2) %>% proportions())
# - Calculate resolution proportions for labelling purposes
(Resol_Type.props4 <- table(datSurv4$Resol_Type) %>% proportions())
ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type4)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type4, fill=Resol_Type4), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type4, linetype=Resol_Type4), size=0.8)
ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8)
ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90))
# Densities of defaults bs right-censoring
(g3_Densities_Resol_Type3 <- ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v3, labels=label.v3) +
scale_fill_manual(name="Competing Risk", values=col.v4, labels=label.v3) +
scale_linetype_manual(name="Competing Risk", values=c("solid","dashed"), labels=label.v3) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# - Densities of competing risks overlayed
(g2_Densities_Resol_Type2 <- ggplot(datSurv2[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type2)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type2, fill=Resol_Type2), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type2, linetype=Resol_Type2), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v[4:6], labels=label.v2) +
scale_fill_manual(name="Competing Risk", values=col.v2[4:6], labels=label.v2) +
scale_linetype_manual(name="Competing Risk", values=c("solid","dashed", "dotted"), labels=label.v2) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# Densities of defaults bs right-censoring
(g3_Densities_Resol_Type3 <- ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution Type", values=col.v3, labels=label.v3) +
scale_fill_manual(name="Resolution Type", values=col.v4, labels=label.v3) +
scale_linetype_manual(name="Resolution Type", values=c("solid","dashed"), labels=label.v3) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# Creating a new dataset with the competing events completely removed
datSurv4 <- datSurv %>% subset(Resol_Type %in% c("Default", "Right-Censored"))
# - Calculate resolution proportions for labelling purposes
(Resol_Type.props4 <- table(datSurv4$Resol_Type) %>% proportions())
# Graphing the distributions, only for accounts with PerfSpell_Age <= 500
(g3_Densities_Resol_Type3 <- ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v3, labels=label.v3) +
scale_fill_manual(name="Competing Risk", values=col.v4, labels=label.v3) +
scale_linetype_manual(name="Competing Risk", values=c("solid","dashed"), labels=label.v3) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
gplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8)
ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8)
# Graphing parameters
label.v3 <- c(paste0("Default (", round(Resol_Type.props4[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type.props4[2]*100), "%)"))
# Graphing parameters
label.v4 <- c(paste0("Default (", round(Resol_Type.props4[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type.props4[2]*100), "%)"))
# Graphing the distributions, only for accounts with PerfSpell_Age <= 500
(g3_Densities_Resol_Type3 <- ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Competing Risk", values=col.v3, labels=label.v4) +
scale_fill_manual(name="Competing Risk", values=col.v4, labels=label.v4) +
scale_linetype_manual(name="Competing Risk", values=c("solid","dashed"), labels=label.v4) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# Graphing the distributions, only for accounts with PerfSpell_Age <= 500
(g3_Densities_Resol_Type3 <- ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution Type", values=col.v3, labels=label.v4) +
scale_fill_manual(name="Resolution Type", values=col.v4, labels=label.v4) +
scale_linetype_manual(name="Resolution Type", values=c("solid","dashed"), labels=label.v4) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# Densities of defaults bs right-censoring
(g3_Densities_Resol_Type3 <- ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution Type", values=col.v3, labels=label.v3) +
scale_fill_manual(name="Resolution Type", values=col.v4, labels=label.v3) +
scale_linetype_manual(name="Resolution Type", values=c("solid","dashed"), labels=label.v3) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
label.v3 <- c(paste0("Default (", round(Resol_Type.props3[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type.props3[2]*100), "%)"))
# Densities of defaults bs right-censoring
(g3_Densities_Resol_Type3 <- ggplot(datSurv3[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type3)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type3, fill=Resol_Type3), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type3, linetype=Resol_Type3), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution Type", values=col.v3, labels=label.v3) +
scale_fill_manual(name="Resolution Type", values=col.v4, labels=label.v3) +
scale_linetype_manual(name="Resolution Type", values=c("solid","dashed"), labels=label.v3) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# Graphing parameters
label.v4 <- c(paste0("Default (", round(Resol_Type.props4[1]*100), "%)"),
paste0("Right-censored (", round(Resol_Type.props4[2]*100), "%)"))
# Graphing the distributions, only for accounts with PerfSpell_Age <= 500
(g3_Densities_Resol_Type4 <- ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution Type", values=col.v3, labels=label.v4) +
scale_fill_manual(name="Resolution Type", values=col.v4, labels=label.v4) +
scale_linetype_manual(name="Resolution Type", values=c("solid","dashed"), labels=label.v4) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
# Display the two density plots (including-- vs excluding competing events) side-by-side
par(mfrow=c(1,2))
# Graphing the distributions, only for accounts with PerfSpell_Age <= 500
(g4_Densities_Resol_Type4 <- ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution Type", values=col.v3, labels=label.v4) +
scale_fill_manual(name="Resolution Type", values=col.v4, labels=label.v4) +
scale_linetype_manual(name="Resolution Type", values=c("solid","dashed"), labels=label.v4) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
)
(g5_Densities_Resol_Type3_vs_4 <- c(g3_Densities_Resol_Type3, g4_Densities_Resol_Type4))
g3_Densities_Resol_Type3
# Display the two density plots (including-- vs excluding competing events) side-by-side
par(mfrow=c(1,2))
(g5_Densities_Resol_Type3_vs_4 <- c(g3_Densities_Resol_Type3, g4_Densities_Resol_Type4))
# Display the two density plots (including-- vs excluding competing events) side-by-side
par(mfrow=c(1,2))
g3_Densities_Resol_Type3
# Display the two density plots (including-- vs excluding competing events) side-by-side
par(mfrow=c(2,2))
gplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution Type", values=col.v3, labels=label.v4) +
scale_fill_manual(name="Resolution Type", values=col.v4, labels=label.v4) +
scale_linetype_manual(name="Resolution Type", values=c("solid","dashed"), labels=label.v4) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
ggplot(datSurv4[PerfSpell_Age<=500,], aes(x=PerfSpell_Age, group=Resol_Type)) + theme_minimal() +
geom_histogram(aes(y=..density.., colour=Resol_Type, fill=Resol_Type), position="identity",
alpha=0.75, size=0.2) +
geom_density(aes(colour=Resol_Type, linetype=Resol_Type), size=0.8) +
# facets & scale options
labs(y=bquote(plain(Empirical~failure*' time histogram & density ')~italic(f(t))),
x=bquote(Discrete~time~italic(t)*" (months) in performing spell")) +
theme(text=element_text(family=chosenFont),legend.position=c(0.785,0.2),
strip.background=element_rect(fill="snow2", colour="snow2"),
strip.text = element_text(size=8, colour="gray50"), strip.text.y.right = element_text(angle=90)) +
scale_colour_manual(name="Resolution Type", values=col.v3, labels=label.v4) +
scale_fill_manual(name="Resolution Type", values=col.v4, labels=label.v4) +
scale_linetype_manual(name="Resolution Type", values=c("solid","dashed"), labels=label.v4) +
scale_y_continuous(breaks=breaks_pretty(), label=comma) +
scale_x_continuous(breaks=breaks_pretty(), label=comma)
?par
?mfcol
?mfrow
??mfcol
# --- Defaulted Accounts
# - Kolmogorov-Smirnov Test
# NOTE: The two-sample KS test uses the maximum discrepency between two distributions as the test statistic - it therefore doesn't take into account the entire distribution (which is one of ots drawbacks).
ks.test(datSurv3[PerfSpellResol_Type_Hist=="Defaulted" & PerfSpell_Age<=300, PerfSpell_Age],datSurv4[PerfSpellResol_Type_Hist=="Defaulted" & PerfSpell_Age<=300, PerfSpell_Age])
# --- Defaulted Accounts
# - Kolmogorov-Smirnov Test
# NOTE: The two-sample KS test uses the maximum discrepency between two distributions as the test statistic - it therefore doesn't take into account the entire distribution (which is one of ots drawbacks).
ks.test(datSurv3[PerfSpellResol_Type_Hist=="Default" & PerfSpell_Age<=300, PerfSpell_Age],datSurv4[PerfSpellResol_Type_Hist=="Default" & PerfSpell_Age<=300, PerfSpell_Age])
?all_of
